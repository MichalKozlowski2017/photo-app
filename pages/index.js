import { useEffect, useState } from "react";
import Head from "next/head";
import { groq } from "next-sanity";
import {getClient} from "@lib/sanity";
import Link from "next/link";
import Image from "next/image";
import { urlFor } from "@lib/sanity";
import { getPhotosByCategory } from "./api/querys";
import { motion } from 'framer-motion';
import { Select, Option } from "@material-tailwind/react";

export default function Home({photos, categories}) {
  const [items, setItems] = useState(photos)
  const [loading, setLoading] = useState(false)
  
  const handleCategories = (category, e) => {
    setLoading(true)
    document.querySelectorAll('.catBtn').forEach(el => {
      el.classList.remove('active')
    })
    e.target.classList.add('active')
    getPhotosByCategory(category).then((val)=>{
      setLoading(false)
      setItems(val)
    })
  }

  return (
    <div style={{paddingTop: '64px'}}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex w-32 items-end gap-4 p-6">
        <Select variant="outlined" label="Category">
          {categories.map((cat) => (
          <Option onClick={(e) => {handleCategories(cat.slug.current, e)}} key={cat._id}> 
            {cat.title}
          </Option>
        ))}
        </Select>
      </div>

      {loading ? <h1>Loading...</h1> : 
        <div className='grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4'>
          {items.map((photo) => (
            <motion.div initial="hidden" animate="visible" variants={{
              hidden: {
                opacity: 0},
              visible: {
                opacity: 1,
                transition: {
                  delay: .1
                }},
            }} key={photo._id}>
              <Link href={`/photo/${photo.slug.current}`} >
                <div className=" relative cursor-pointer">
                    <Image 
                      layout="responsive"
                      width={1500}
                      height={1000}
                      priority={true}
                      // placeholder='blur' 
                      // blurDataURL={photo.mainImage.metadata.lqip} 
                      src={urlFor(photo.mainImage).url()}/>
                </div>
              </Link>
            </motion.div>
          ))}
        </div>
      }
      

    </div>
  );
}

export async function getStaticProps({ params, preview = false }) {
  const photoQuery = groq`
    *[_type == "photo"] | order(_createdAt desc) {
      ...,
      categories[] -> {title},
      lens[] -> {title},
      "mainImage": mainImage.asset -> {
        ...,
        metadata {
          exif,
          blurhash,
          palette,
          lqip
        }
      },
    }
  `;
  
  const categoriesQuery = groq`
  *[_type == "category"] | order(title asc) {
    _id,
    title,
    slug {current}
  }
`;

  const photos = await getClient(preview).fetch(photoQuery);
  const categories = await getClient(preview).fetch(categoriesQuery);

  return {
    props: {
      photos,
      categories,
      preview,
    },
    revalidate: 10,
  };
}